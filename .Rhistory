?stargazer
stargazer(Modelbing_A_pos, Modelbing_A_neg, Modelafinn_A, Modelnrc_anger, Modelnrc_A_disgust, Modelnrc_A_fear, Modelnrc_A_surprise,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("bing positive", "bing negative","afinn", "anger", "disgust", "fear", "surprise"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
library(compareDF)
library(dplyr)
library(foreign)
install.packages("ggplot2")
library(ggplot2)
library(haven)
library(lmtest)
library(pander)
library(plm)
library(quanteda)
library(readtext)
library(readxl)
library(RColorBrewer)
library(rworldmap)
library(stargazer)
library(stringr)
library(syuzhet)
library(texreg)
library(tidyr)
library(zip)
library(tibble)
#install.packages("tidytext")
#install.packages("tidyverse")
library(tidytext)
library(tidyverse)
library(glue)
library(remotes)
install_github("EmilHvitfeldt/textdata")
install_github("juliasilge/tidytext")
install.packages("ggplot2")
#Upload UNGDC data
dir.create(temp <- tempfile())
urlungdc<-'https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/0TJX8Y/PZUURT'
download.file(urlungdc, paste0(temp, '/PZUURT.zip'), mode="wb",
exdir = temp)
unzip(paste0(temp, '/PZUURT.zip'), exdir = temp)
ungd_files <- readtext(paste0(temp, "/Converted sessions/*"),
docvarsfrom = "filenames",
dvsep="_",
docvarnames = c("Country", "Session", "Year"))
ungd_files$doc_id <- str_replace(ungd_files$doc_id , ".txt", "") %>%
str_replace(. , "_\\d{2}", "")
unlink(temp)
rm(temp)
rm(urlungdc)
load(url("http://www.politicalterrorscale.org/Data/Files/PTS-2019.RData"))
PTS_2019<-arrange(PTS_2019,Country,Year)
PTS_2019<-PTS_2019 %>%
group_by(Country) %>%
mutate(.,PTS_S_ch=c(NA,diff(PTS_S)))
PTS_2019<-mutate(PTS_2019,PTS_S_var= ifelse(PTS_S_ch>0,1,0))
PTS_2019<-PTS_2019 %>%
group_by(Country) %>%
mutate(.,PTS_H_ch=c(NA,diff(PTS_H)))
PTS_2019<-mutate(PTS_2019,PTS_H_var= ifelse(PTS_H_ch>0,1,0))
PTS_2019<-PTS_2019 %>%
group_by(Country) %>%
mutate(.,PTS_A_ch=c(NA,diff(PTS_A)))
PTS_2019<-mutate(PTS_2019,PTS_A_var= ifelse(PTS_A_ch>0,1,0))
#compare years
PTS_2019 %>%
group_by(Year) %>%
summarise(n = n())
ungd_files %>%
group_by(Year) %>%
summarise(n = n())
#compare country
colnames(ungd_files)[colnames(ungd_files)=="Country"] <- "MergeCountry"
colnames(PTS_2019)[colnames(PTS_2019)=="WordBank_Code_A"] <- "MergeCountry"
PTS_2019 %>%
group_by(MergeCountry) %>%
summarise(n = n())
ungd_files %>%
group_by(MergeCountry) %>%
summarise(n = n())
merge_PTS_ungd <- merge(PTS_2019, ungd_files, by = c('Year','MergeCountry'), all=TRUE)
merge_PTS_ungd1976 <- subset(merge_PTS_ungd, !merge_PTS_ungd$Year<1976)
NA_PTS_ungd1976 <- subset(merge_PTS_ungd1976, is.na(merge_PTS_ungd1976$MergeCountry))
mergeNA_PTS_ungd_1976 <- subset(merge_PTS_ungd1976, !is.na(merge_PTS_ungd1976$MergeCountry))
tail(mergeNA_PTS_ungd_1976)
head(NA_PTS_ungd1976,20)
tail(NA_PTS_ungd1976)
#there are 11 countries which we have to delete due to non-existing data in the text corpus
#Deleting NAs in the text - speeches rows from the "mergeNA_PTS_ungd_1976"
clean_PTS_ungd1976 <- subset(mergeNA_PTS_ungd_1976, !is.na(mergeNA_PTS_ungd_1976$text))
head(clean_PTS_ungd1976)
tail(clean_PTS_ungd1976)
clean_ungd_corpus <- corpus(clean_PTS_ungd1976, text_field = "text")
# ungdc.1990 <- corpus_subset(ungd_corpus, Year>1990)
#Tokenization and basic pre-processing
clean_toks_UNGD <- tokens(clean_ungd_corpus, what = "word",
remove_punct = TRUE,
remove_symbols = TRUE,
remove_numbers = TRUE,
remove_twitter = TRUE,
remove_url = TRUE,
remove_hyphens = FALSE,
verbose = TRUE,
include_docvars = TRUE)
lower_UNGD <- tokens_tolower(clean_toks_UNGD)
stop_UNGD <- tokens_select(lower_UNGD, stopwords("english"), selection = "remove", padding = FALSE)
ngram_UNGD <- tokens(stop_UNGD, ngrams = c(1:2), include_docvars = TRUE)
listHHRR <- list( c("Human", "Rights"))
compound_UNGD_HHRR <- tokens_compound(lower_UNGD, listHHRR, valuetype = "fixed", concatenator = "_")
HHRR_dict <- dictionary(list(Human.Rights=c("Human Rights")))
dfm_UNGD_HHRR <- dfm(compound_UNGD_HHRR)
HHRR_dfm <- dfm_lookup(dfm_UNGD_HHRR, HHRR_dict, valuetype = "fixed")
#creating a data frame
Human.Rights_HHRR <- convert(HHRR_dfm, to = "data.frame")
#converting documentID into two columns - country and year
HHRR_counts <- Human.Rights_HHRR %>%
separate(document, c("country", "year"), "_")
#year as numeric
HHRR_counts$year <- as.numeric(HHRR_counts$year)
HHRR_counts <- plyr::rename(HHRR_counts, c("Human.Rights"="HHRR"))
#Merge HHRR counts with the MergeNA_PTS_ungd_1976 data set
colnames(HHRR_counts)[colnames(HHRR_counts)=="country"] <- "MergeCountry"
colnames(HHRR_counts)[colnames(HHRR_counts)=="year"] <- "Year"
colnames(clean_PTS_ungd1976)[colnames(clean_PTS_ungd1976)=="MergeCountry"] <- "MergeCountry"
clean_PTS_ungd1976 %>%
group_by(MergeCountry) %>%
summarise(n = n())
HHRR_counts %>%
group_by(MergeCountry) %>%
summarise(n = n())
merge_HHRRcounts <- merge(clean_PTS_ungd1976, HHRR_counts, by = c('MergeCountry','Year'), all=TRUE)
ModelHHRR_S <- lm (HHRR ~ PTS_S + PTS_S_ch + PTS_S*PTS_S_ch, data = merge_HHRRcounts)
screenreg(ModelHHRR_S)
#PTS_S significant and negative
ModelHHRR_A <- lm (HHRR ~ PTS_A + PTS_A_ch + PTS_A*PTS_A_ch, data = merge_HHRRcounts)
screenreg(ModelHHRR_A)
#PTS_A significant and negative
ModelHHRR_H <- lm (HHRR ~ PTS_H + PTS_H_ch + PTS_H*PTS_H_ch, data = merge_HHRRcounts)
screenreg(ModelHHRR_H)
#PTS_H insignificant
#create human rights lists from the three sources
HRlistFariss <- list( c("kill"), c("forc"), c("arm"), c("group"), c("civilian"), c("human"), c("secur"), c("disappear"), c("attack"), c("execut") , c("tortur"), c("member"), c("includ"), c("arrest"), c("prison"), c("polit"), c("amnesti"), c("trial"), c("releas"), c("imprison"), c("sentenc"), c("charg"), c("conscience"), c("polic"), c("offic"), c("illtreat"), c("death"), c("court"), c("alleg"), c("law"), c("service"), c("concern"), c("appeal"), c("servic"), c("committee"),    c("militari"), c("area"), c("continu"), c("section"), c("state"), c("dure"), c("arrest"), c("accord"), c("offici"), c("presid"), c("opposit"), c("howev"), c("parti"), c("author"), c("law"), c("provid"), c("gener"), c("public"), c("constitut"), c("employ"), c("women"), c("right"), c("respect"), c("freedom"), c("prohibit"), c("case"), c("ngo"), c("tortur"), c("gener"), c("labor"), c("detain"), c("releas"), c("elect"), c("local"), c("presidenti"), c("region"), c("mani"), c("regim"), c("nation"), c("ethnic"), c("union"), c("practic"), c("work"), c("foreign"), c("children"), c("investig"), c("relig"), c("islam"), c("roma"), c("worker"), c("traffic"), c("feder"), c("parliament"))
HRlistGreene <- list(c("committed"), c("victims"), c("populations"), c("scale"), c("armed"), c("army"), c("commanders"), c("conscripted"), c("assassinations"), c("massacres"), c("internally", "displaced"), c("food"), c("humanitarian"), c("landmines"), c("money"), c("raped"), c("disappearances"), c("frequently"), c("numerous"), c("widespread"), c("common"), c("regularly"), c("routinely"), c("systematic"), c("extensive"))
HRlistWatanabe <- list(c("human", "rights"), c("violat"), c("race"), c("dignit"), c("protect"), c("citizen"), c("educat"), c("child"), c("refugee"), c("communit"), c("people"), c("responsibl"), c("health"), c("world"))
HRlist <- do.call(c, list(HRlistFariss, HRlistGreene, HRlistWatanabe))
#summary(HRlist)
compound_UNGD_HRlist <- tokens_compound(lower_UNGD, HRlist, valuetype = "fixed", concatenator = "_")
#compound_UNGD_HRlist
dict_HRFariss <- dictionary(list(human_rightsF = c("kill", "forc", "arm", "group", "civilian", "human", "secur", "disappear", "attack", "execut" , "tortur", "member", "includ", "arrest", "prison", "polit", "amnesti", "trial", "releas", "imprison", "sentenc", "charg", "conscience", "polic", "offic", "illtreat", "death", "court", "alleg", "law", "service", "concern", "appeal", "servic", "committee", "militari", "area", "continu", "section", "state", "dure", "arrest", "offici", "presid", "opposit", "parti", "author", "law", "provid", "gener", "public", "constitut", "employ", "women", "right", "respect", "freedom", "prohibit", "case", "ngo", "tortur", "gener", "labor", "detain", "releas", "elect", "local", "presidenti", "region", "mani", "regim", "nation", "ethnic", "union", "practic", "work", "foreign", "children", "investig", "relig", "islam", "roma", "worker", "traffic", "feder", "parliament")))
dict_HRGreene <- dictionary(list(human_rightsG = c("commit", "victim", "popul", "scale", "armi", "command", "conscript", "assassin", "massacr", "intern_displac", "food", "humanitarian", "landmin", "money", "rape", "disappear", "widespread", "systemat", "extens")))
#checking the stemmed version of dict_HRGreene
char_HRGreene <- as.character(dict_HRGreene)
toks_HRGreene <- tokens(char_HRGreene)
toks_HRGreene
remove_HRGreene <- tokens(toks_HRGreene, remove_punct = TRUE)
remove_HRGreene
tokens_wordstem(remove_HRGreene)
dict_HRWatanabe <- dictionary(list(human_rightsW = c("human_rights", "violat", "race", "dignit", "protect", "citizen", "educat", "child", "refugee", "communit", "people", "responsibl", "health", "world")))
#combine the dictionaries
HRdict <- c(dict_HRGreene["human_rightsG"], dict_HRFariss["human_rightsF"], dict_HRWatanabe["human_rightsW"])
#one complete dictionary
HRdict_total <- dictionary(list(human_rights_total = c("kill", "forc", "arm", "group", "civilian", "human", "secur", "disappear", "attack", "execut" , "tortur", "member", "includ", "arrest", "prison", "polit", "amnesti", "trial", "releas", "imprison", "sentenc", "charg", "conscience", "polic", "offic", "illtreat", "death", "court", "alleg", "law", "service", "concern", "appeal", "servic", "committee", "militari", "area", "continu", "section", "state", "dure", "arrest", "offici", "presid", "opposit", "parti", "author", "law", "provid", "gener", "public", "constitut", "employ", "women", "right", "respect", "freedom", "prohibit", "case", "ngo", "tortur", "gener", "labor", "detain", "releas", "elect", "local", "presidenti", "region", "mani", "regim", "nation", "ethnic", "union", "practic", "work", "foreign", "children", "investig", "relig", "islam", "roma", "worker", "traffic", "feder", "parliament", "commit", "victim", "popul", "scale", "armi", "command", "conscript", "assassin", "massacr", "intern_displac", "food", "humanitarian", "landmin", "money", "rape", "disappear", "widespread", "systemat", "extens", "human_rights", "violat", "race", "dignit", "protect", "citizen", "educat", "child", "refugee", "communit", "people", "responsibl", "health", "world")))
HRdict
HRdict_total
dfm_UNGD_HR <- dfm(compound_UNGD_HRlist)
#combined dict
HR_dfm <- dfm_lookup(dfm_UNGD_HR, HRdict, valuetype = "fixed")
#total dict
HR_dfm_total <- dfm_lookup(dfm_UNGD_HR, HRdict_total, valuetype = "fixed")
#creating a data frame
Human.Rights_HR <- convert(HR_dfm_total, to = "data.frame")
#converting documentID into two columns - country and year
HR_counts <- Human.Rights_HR %>%
separate(document, c("country", "year"), "_")
#year as numeric
HR_counts$year <- as.numeric(HR_counts$year)
HR_counts <- plyr::rename(HR_counts, c("human_rights_total"="HR"))
#Merge total HR dictionary counts with the MergeNA_PTS_ungd_1976 data set
colnames(HR_counts)[colnames(HR_counts)=="country"] <- "MergeCountry"
colnames(HR_counts)[colnames(HR_counts)=="year"] <- "Year"
colnames(merge_HHRRcounts)[colnames(merge_HHRRcounts)=="MergeCountry"] <- "MergeCountry"
merge_HHRRcounts %>%
group_by(MergeCountry) %>%
summarise(n = n())
HR_counts %>%
group_by(MergeCountry) %>%
summarise(n = n())
merge_HRdict_counts <- merge(merge_HHRRcounts, HR_counts, by = c('MergeCountry','Year'), all=TRUE)
head(merge_HRdict_counts)
#merged dataset with both dictionaries: HHRRterm and HRdict
ModelHRdict_S <- lm (HR ~ PTS_S + PTS_S_ch + PTS_S*PTS_S_ch, data = merge_HRdict_counts)
screenreg(ModelHRdict_S)
ModelHRdict_A <- lm (HR ~ PTS_A + PTS_A_ch + PTS_A*PTS_A_ch, data = merge_HRdict_counts)
screenreg(ModelHRdict_A)
ModelHRdict_H <- lm (HR ~ PTS_H + PTS_H_ch + PTS_H*PTS_H_ch, data = merge_HRdict_counts)
screenreg(ModelHRdict_H)
#get sentiment analysis with four different dictionaries: syuzhet (1), afinn, bing, and nrc
#tokenise with tidytext
sent_words <- clean_PTS_ungd1976 %>%
group_by(MergeCountry) %>%
ungroup() %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
#count(doc_id, word, sort = TRUE)
str(sent_words)
sent_words_lim <- subset(sent_words, select = c(Year, MergeCountry, doc_id, PTS_A, PTS_A_var, Session, word))
sent_words_lim
sent_words <- sent_words %>%
bind_tf_idf(word, doc_id, n) %>%
arrange(desc(tf_idf))
#get sentiment analysis with four different dictionaries: syuzhet (1), afinn, bing, and nrc
#tokenise with tidytext
sent_words <- clean_PTS_ungd1976 %>%
group_by(MergeCountry) %>%
ungroup() %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
#count(doc_id, word, sort = TRUE)
str(sent_words)
sent_words_lim <- subset(sent_words, select = c(Year, MergeCountry, doc_id, PTS_A, PTS_A_var, Session, word))
sent_words_lim
#sent_words <- sent_words %>%
# bind_tf_idf(word, doc_id, n) %>%
#arrange(desc(tf_idf))
#find total number of words per country per year in speech
wordstotal <- sent_words_lim %>%
count(doc_id, word, sort = TRUE)
str(wordstotal)
wordstotal <- wordstotal %>%
bind_tf_idf(word, doc_id , n) %>%
arrange(desc(tf_idf))
wordstotal
##merge tf idf back with the dataset
sent_tfidf <- merge(sent_words, wordstotal, by = c('doc_id','word'), all=TRUE)
head(sent_tfidf)
sent_words_lim <- subset(sent_words, select = c(Year, MergeCountry, doc_id, PTS_S, PTS_S_var, Session, word))
head(sent_words_lim)
#negative sentiment - bing
sentiment_plotn <-
sent_words_lim %>%
inner_join(get_sentiments("bing")) %>%
filter(sentiment == "negative") %>%
count(Year, MergeCountry, sentiment)
library(ggplot2)
#positive emotions UN speeches - bing
sentiment_plotp <-
sent_words_lim %>%
inner_join(get_sentiments("bing")) %>%
filter(sentiment == "positive") %>%
count(Year, MergeCountry, sentiment)
par(mfrow=c(2,1), mar=c(4, 4.1, 4.1, 2.1))
ggplot(sentiment_plotp, aes(x=as.numeric(Year), y=n))+
geom_smooth(color="red")+
theme_minimal()+
ylab("Frequency of Positive Words in UN speeches")+
xlab("Year")
ggplot(sentiment_plotn, aes(x=Year, y=n))+
geom_smooth(color="blue")+
geom_point(color="red")+
theme_minimal()+
ylab("Frequency of Negative Words in UN speeches")+
xlab("Year")
ggplot(sentiment_plotp, aes(x=as.numeric(Year), y=n))+
geom_smooth(color="red")+
geom_smooth(data=sentiment_plotn, color="blue")
###no sentiment filter - bing
count_UNGDsentiment_bing <-
sent_tfidf %>%
inner_join(get_sentiments("bing")) %>%
count(Year, MergeCountry, sentiment)
count_UNGDsentiment_bing
##afinn
count_UNGDsentiment_afinn <- sent_words_lim %>%
inner_join(get_sentiments("afinn")) %>%
group_by(MergeCountry, Year) %>%
summarise(sentiment = mean(value)) %>%
mutate(method = "AFINN")
count_UNGDsentiment_afinn
#count sentiment dictionary nrc
count_UNGDsentiment_nrc <- sent_words_lim %>%
inner_join(get_sentiments("nrc")) %>%
group_by(MergeCountry, Year) %>%
count (Year, MergeCountry, sentiment) %>%
mutate(method = "nrc")
count_UNGDsentiment_nrc
##bing
bing_ex <- sent_words_lim %>%
filter(MergeCountry == "USA") %>%
inner_join(get_sentiments("bing")) %>%
group_by(MergeCountry) %>%
mutate(method = "BING")
bing_ex
##nrc
nrc_anger <- get_sentiments("nrc") %>%
filter(sentiment == "anger")
sent_words_lim %>%
filter(MergeCountry == "USA") %>%
inner_join(nrc_anger) %>%
count(word, sort = TRUE)
#Merge sentiment dictionaries with the MergeNA_PTS_ungd_1976 data set
head(merge_HRdict_counts)
#merged dataset with both dictionaries: HHRRterm and HRdict
colnames(count_UNGDsentiment_bing)[colnames(count_UNGDsentiment_bing)=="sentiment"] <- "sentiment_bing"
colnames(count_UNGDsentiment_bing)[colnames(count_UNGDsentiment_bing)=="n"] <- "n_bing"
head(count_UNGDsentiment_bing)
#merging variables are names the same
merge_sentiment_counts1 <- merge(merge_HRdict_counts, count_UNGDsentiment_bing, by = c('MergeCountry','Year'), all=TRUE)
head(merge_sentiment_counts1)
##afinn
head(count_UNGDsentiment_afinn)
colnames(count_UNGDsentiment_afinn)[colnames(count_UNGDsentiment_afinn)=="method"] <- "method_afinn"
colnames(count_UNGDsentiment_afinn)[colnames(count_UNGDsentiment_afinn)=="n"] <- "n_afinn"
colnames(count_UNGDsentiment_afinn)[colnames(count_UNGDsentiment_afinn)=="sentiment"] <- "sentiment_afinn"
merge_sentiment_counts2 <- merge(merge_HRdict_counts, count_UNGDsentiment_afinn, by = c('MergeCountry','Year'), all=TRUE)
head(merge_sentiment_counts2)
##nrc
head(count_UNGDsentiment_nrc)
colnames(count_UNGDsentiment_nrc)[colnames(count_UNGDsentiment_nrc)=="method"] <- "method_nrc"
colnames(count_UNGDsentiment_nrc)[colnames(count_UNGDsentiment_nrc)=="n"] <- "n_nrc"
colnames(count_UNGDsentiment_nrc)[colnames(count_UNGDsentiment_nrc)=="sentiment"] <- "sentiment_nrc"
merge_sentiment_counts3<- merge(merge_HRdict_counts, count_UNGDsentiment_nrc, by = c('MergeCountry','Year'), all=TRUE)
head(merge_sentiment_counts3)
###create dummies for PTS
head(merge_sentiment_counts1)
merge_sentiment_counts1$PTS_A_dummy <- factor(merge_sentiment_counts1$PTS_A)
is.factor(merge_sentiment_counts1$PTS_A_dummy)
merge_sentiment_counts2$PTS_A_dummy <- factor(merge_sentiment_counts2$PTS_A)
is.factor(merge_sentiment_counts2$PTS_A_dummy)
merge_sentiment_counts3$PTS_A_dummy <- factor(merge_sentiment_counts3$PTS_A)
is.factor(merge_sentiment_counts3$PTS_A_dummy)
Modelbing_Apos_2 <- plm (n_bing ~ PTS_A_dummy + PTS_A_dummy^2 + PTS_A_var + PTS_A_dummy*PTS_A_var + PTS_A_dummy^2*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_Apos_2)
Modelbing_Apos_2 <- plm (n_bing ~ PTS_A + PTS_A^2 + PTS_A_var + PTS_A*PTS_A_var + PTS_A^2*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_Apos_2)
Modelbing_Apos_2 <- plm (n_bing ~ PTS_A^2 + PTS_A_var +  PTS_A^2*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_Apos_2)
Modelbing_Apos_2 <- plm (n_bing ~ PTS_A^2 + PTS_A_var +  PTS_A^2*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_Apos_2)
stargazer(Modelbing_A_pos, Modelbing_A_neg, Modelafinn_A, Modelnrc_anger, Modelnrc_A_disgust, Modelnrc_A_fear, Modelnrc_A_surprise,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("bing positive", "bing negative","afinn", "anger", "disgust", "fear", "surprise"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
###packages
install.packages ("plm")
library(plm)
###positive bing
#Modelbing_S_pos <- plm (n_bing ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), , na.action = na.exclude, effect = "twoways", model = "within")
#screenreg(Modelbing_S_pos)
Modelbing_A_pos <- plm (n_bing ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_A_pos)
install.packages("plm")
#Modelbing_H <- plm (n_bing ~ PTS_H_dummy + PTS_H_var + PTS_H_dummy*PTS_H_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), effect = "twoways", model = "within")
#screenreg(Modelbing_H)
#for A and S, only PTS dummies are significant, so a higher PTS leads to more positive sentiments in UNGDC speeches
###negative bing
Modelbing_S_neg <- plm (n_bing ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = subset(merge_sentiment_counts1, sentiment_bing == "negative"), effect = "twoways", model = "within")
###packages
#install.packages ("plm")
library(plm)
###positive bing
#Modelbing_S_pos <- plm (n_bing ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), , na.action = na.exclude, effect = "twoways", model = "within")
#screenreg(Modelbing_S_pos)
Modelbing_A_pos <- plm (n_bing ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_A_pos)
#Modelbing_H <- plm (n_bing ~ PTS_H_dummy + PTS_H_var + PTS_H_dummy*PTS_H_var, data = subset(merge_sentiment_counts1, sentiment_bing == "positive"), effect = "twoways", model = "within")
#screenreg(Modelbing_H)
#for A and S, only PTS dummies are significant, so a higher PTS leads to more positive sentiments in UNGDC speeches
###negative bing
#Modelbing_S_neg <- plm (n_bing ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = subset(merge_sentiment_counts1, sentiment_bing == "negative"), effect = "twoways", model = "within")
#screenreg(Modelbing_S_neg)
#PTS leads to more negative sentiment in speeches
Modelbing_A_neg <- plm (n_bing ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts1, sentiment_bing == "negative"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelbing_A_neg)
#PTS leads to more negative sentiment in speeches
###regressions with sentiment in general
#Modelbing_S <- lm (n_bing ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = merge_sentiment_all)
#screenreg(Modelbing_S)
Modelbing_A <- lm (n_bing ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, na.action = na.exclude, data = merge_sentiment_counts1)
screenreg(Modelbing_A)
#Modelbing_H <- lm (n_bing ~ PTS_H_dummy + PTS_H_var + PTS_H_dummy*PTS_H_var, data = merge_sentiment_all)
#screenreg(Modelbing_H)
#all coefficients significant, also in the interaction term
###regressions afinn
head(merge_sentiment_counts2,20)
summary(merge_sentiment_counts2$sentiment_afinn)
#Modelafinn_S <- plm (sentiment_afinn ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = merge_sentiment_counts2, effect = "twoways", model = "within")
#screenreg(Modelafinn_S)
#dummys PTS 4 and 5 are significant and negative, so sentiment becomes more negative if a country has a higher score
#interaction between PTS2 and change is significant and negative
Modelafinn_A <- plm (sentiment_afinn ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = merge_sentiment_counts2, na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelafinn_A)
#only dummies significant and negative
###regressions nrc
#--> i need to group them by the sentiment of anger etc. in each of the windows...
##ANGER
head(merge_sentiment_all$sentiment_nrc, 20)
###regressions nrc
#--> i need to group them by the sentiment of anger etc. in each of the windows...
##ANGER
#head(merge_sentiment_all$sentiment_nrc, 20)
#Modelnrc_S <- plm (n_nrc ~ PTS_S_dummy + PTS_S_var + PTS_S_dummy*PTS_S_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "anger"), na.action = na.exclude, effect = "twoways", model = "within")
#screenreg(Modelnrc_S)
#dummies positive significant: more anger talk, change alone is significant and negative, interaction with dummy 2 significant and positive
Modelnrc_anger <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "anger"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_anger)
#dummies positive and significant
Modelnrc_A_disgust <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "disgust"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_disgust)
#significant
Modelnrc_A_sadness <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "sadness"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_sadness)
Modelnrc_A_fear <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "fear"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_fear)
#interaction term positive and negative
Modelnrc_A_negative <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "negative"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_negative)
#positive categories
Modelnrc_A_positive <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "positive"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_positive)
Modelnrc_A_anticip <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "anticipation"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_anticip)
Modelnrc_A_trust <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "trust"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_trust)
Modelnrc_A_surprise <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "surprise"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_surprise)
Modelnrc_A_joy <- plm (n_nrc ~ PTS_A_dummy + PTS_A_var + PTS_A_dummy*PTS_A_var, data = subset(merge_sentiment_counts3, sentiment_nrc == "joy"), na.action = na.exclude, effect = "twoways", model = "within")
screenreg(Modelnrc_A_joy)
summary(merge_sentiment_counts3$sentiment_nrc)
#significant
stargazer(Modelbing_A_pos, Modelbing_A_neg, Modelafinn_A, Modelnrc_anger, Modelnrc_A_disgust, Modelnrc_A_fear, Modelnrc_A_surprise,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("bing positive", "bing negative","afinn", "anger", "disgust", "fear", "surprise"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
stargazer(Modelbing_A_pos, Modelbing_A_neg, Modelafinn_A,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("bing positive", "bing negative","afinn"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
stargazer(Modelnrc_anger, Modelnrc_A_disgust, Modelnrc_A_fear, Modelnrc_A_surprise,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("anger", "disgust", "fear", "surprise"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
star.cutoffs = c(0.05,0.01,0.001))
stargazer(Modelbing_A_pos, Modelbing_A_neg, Modelafinn_A,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("bing positive", "bing negative","afinn"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
stargazer(Modelnrc_anger, Modelnrc_A_disgust, Modelnrc_A_fear, Modelnrc_A_surprise,
align=TRUE,
type = 'latex',
covariate.labels = c("PTS=2","PTS=3","PTS=4","PTS=5","change of PTS","PTS=2*change","PTS=3*change","PTS=4*change"),
column.sep.width = "10pt",
title= "Table 2. Panel regression - Sentiment Analysis",
dep.var.labels = c("",""),
column.labels = c("anger", "disgust", "fear", "surprise"),
model.names = FALSE,
model.numbers = FALSE,
omit.stat=c("LL","ser","f","adj.rsq"),
star.char = c("*","**","***"),
star.cutoffs = c(0.05,0.01,0.001))
